
import os
import json
import pandas as pd
import datetime


def generate_report(report_path="mutation/reports/1_intermediate_reports", report_prefix="mutation_report", json_file_path="mutation/1695498753.json",
                    export_csv=True, id=0, full_test_name="test"):
    '''
    This function generates a report from a JSON file generated by Mull.
    The report is a CSV file with the following columns:
    id, file, test, inner_id, status, language, start, end, mutatorName, replacement

    Parameters:
    report_path (str): The path where the report will be saved
    report_prefix (str): The prefix of the report file
    json_file_path (str): The path of the JSON file
    export_csv (bool): If True, the report will be exported as a CSV file
    id (int): The id of the first entry in the report
    full_test_name (str): The full name of the test

    Returns:
    df (DataFrame): The report as a Pandas DataFrame
    '''

    # Open and read the JSON file
    with open(json_file_path, 'r') as json_file:
        data = json.load(json_file)

    # Now, you can work with the JSON data as a Python dictionary
    entries_ = data['files']

    # For each file, get the fields id, location, mutatorName, replacement and status
    entries = []

    for entry_ in entries_:

        outer_entry = entries_[entry_]
        language = outer_entry['language']
        inner_entries = outer_entry['mutants']
        for entry in inner_entries:
            entries.append({
                'id': id,
                'file': entry_,
                'test': full_test_name,
                'inner_id': entry['id'],
                'status': entry['status'],
                'language': language,
                'start': str(entry['location']['start']['line'])+":"+str(entry['location']['start']['column']),
                'end': str(entry['location']['end']['line'])+":"+str(entry['location']['end']['column']),
                'mutatorName': entry['mutatorName'],
                'replacement': entry['replacement']
            })
            id += 1

    # Create a Pandas DataFrame from the dictionary
    df = pd.DataFrame(entries)

    # Save the Pandas DataFrame as a CSV file using a date stamp in the path to make it unique
    if export_csv:
        if not os.path.exists(report_path):
            os.makedirs(report_path)

        df.to_csv(os.path.join(
            report_path, f'{report_prefix}_{datetime.datetime.now().strftime("%Y%m%d%H%M%S")}.csv'), index=False, encoding='utf-8')

    print("Report generated successfully")
    return df


if __name__ == "__main__":

    # This should be hardcoded or passed in as an argument
    job_dir = "./mutation/reports/jobs/1696008995"

    # TODO rename this to be data-based
    json_files_path = f"{job_dir}/0_json_reports"
    intermediate_csv_files_path = f"{job_dir}/1_intermediate_reports"
    final_csv_files_path = f"{job_dir}/2_final_reports"
    test_mapping_path = f"{job_dir}/7_test_mapping"
    mutant_mapping_path = f"{job_dir}/2_mutant_mapping"
    killmap_path = f"{job_dir}/3_killmap"
    killmatrix_path = f"{job_dir}/4_killmatrix"

    temp_report = generate_report(
        json_file_path=f"{json_files_path}/1696008995.json", report_path=f"{final_csv_files_path}")
