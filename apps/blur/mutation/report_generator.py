import json
import pandas as pd
import datetime
import os


def generate_report(report_path="apps/blur/mutation/reports/1_intermediate_reports", report_prefix="mutation_report", json_file_path="apps/blur/mutation/reports/jobs/1/1_intermediate_reports/1698885976.json",
                    export_csv=False, id=0, full_test_name="test", make_path_relative=True, absolute_root_path="/Users/smadadi/Projects/halide_16_for_llvm14/apps/blur/"):
    '''
    This function generates a report from a JSON file generated by Mull.
    The report is a CSV file with the following columns:
    id, file, test, inner_id, status, language, start, end, mutatorName, replacement

    Parameters:
    report_path (str): The path where the report will be saved
    report_prefix (str): The prefix of the report file
    json_file_path (str): The path of the JSON file
    export_csv (bool): If True, the report will be exported as a CSV file
    id (int): The id of the first entry in the report
    full_test_name (str): The full name of the test

    Returns:
    df (DataFrame): The report as a Pandas DataFrame
    '''

    # Open and read the JSON file
    with open(json_file_path, 'r') as json_file:
        data = json.load(json_file)

    # Now, you can work with the JSON data as a Python dictionary
    entries_ = data['files']

    # For each file, get the fields id, location, mutatorName, replacement and status
    entries = []

    for entry_ in entries_:

        outer_entry = entries_[entry_]
        language = outer_entry['language']
        inner_entries = outer_entry['mutants']
        for entry in inner_entries:
            if make_path_relative:
                entry_ = entry_.replace(absolute_root_path, "")

            entries.append({
                'id': id,
                'mutation': f"{entry_} (Line {entry['location']['start']['line']}) : {entry['mutatorName']}",
                'file': f"{entry_}",
                'test': full_test_name,
                'inner_id': entry['id'],
                'status': entry['status'],
                'language': language,
                'start': str(entry['location']['start']['line'])+":"+str(entry['location']['start']['column']),
                'end': str(entry['location']['end']['line'])+":"+str(entry['location']['end']['column']),
                'mutatorName': entry['mutatorName'],
                'replacement': entry['replacement']
            })
            id += 1

    # Create a Pandas DataFrame from the dictionary
    df = pd.DataFrame(entries)

    # Save the Pandas DataFrame as a CSV file using a date stamp in the path to make it unique
    if export_csv:
        if not os.path.exists(report_path):
            os.makedirs(report_path)

        df.to_csv(os.path.join(
            report_path, f'{report_prefix}_{datetime.datetime.now().strftime("%Y%m%d%H%M%S")}.csv'), index=False, encoding='utf-8')

    print("Report generated successfully")
    return df


def generate_full_report_for_finished_tests(json_files_path="./mutation/reports/mutation/0_json_reports",
                                            mutant_mapping_path="./mutation/reports/2_mutant_mapping",
                                            report_prefix="mutation_report",
                                            intermediate_report_path="mutation/reports/1_intermediate_reports",
                                            final_report_path="apps/blur/mutation/reports/2_final_reports", first_run=True):
    '''
    Given the to folder containing json files for test results,
    this function generates a report for all tests with a status of 0 or 1 and saves it in the report_path folder.
    '''

    reports = pd.DataFrame()

    # iterate over json files in the json_files_path folder
    for filename in os.listdir(json_files_path):
        if filename.endswith(".json") and not filename.startswith("-") and not filename.startswith("0") and not filename.startswith("1"):
            print(f"Processing {filename}")
            json_file_path = os.path.join(json_files_path, filename)
            # get the test name from the file name
            test_name = "_".join(filename.split("_")[0:-1])
            test_name = test_name.replace("_", "/")
            # get the full test name from the test_names_df_path
            new_report = generate_report(report_path=intermediate_report_path, report_prefix=report_prefix,
                                         json_file_path=json_file_path, export_csv=True, full_test_name=test_name)

            if first_run:
                # save the report

                first_run = False
                # Generate mutant mapping
                mutants_df = new_report

                # drop the "test" column
                mutants_df = mutants_df.drop(columns=["test"])

                # create the path if it doesn't exist
                if not os.path.exists(mutant_mapping_path):
                    os.makedirs(mutant_mapping_path)

                # Store mutant mapping using datetime.now to make the file name unique
                mutants_df.to_csv(os.path.join(mutant_mapping_path, f"mutant_mapping_{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}.csv"),
                                  index=False, encoding='utf-8')

            # generate report
            reports = pd.concat([reports, new_report], ignore_index=True)

    # save the report
    if not os.path.exists(final_report_path):
        os.makedirs(final_report_path)

    # drop duplicates
    reports = reports.drop_duplicates()

    # use the current date and time as a unique identifier for the report
    reports.to_csv(os.path.join(
        final_report_path, f'{report_prefix}_{datetime.datetime.now().strftime("%Y%m%d%H%M%S")}.csv'), index=False, encoding='utf-8')

    return reports, mutants_df


if __name__ == '__main__':
    pass

    generate_report(report_path="apps/blur/mutation/reports/jobs/1/1_intermediate_reports", report_prefix="mutation_report",
                    json_file_path="apps/blur/mutation/reports/jobs/1/1_intermediate_reports/1698885976.json", export_csv=True)
